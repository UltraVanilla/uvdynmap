import * as Knex from "knex";

export async function up(knex: Knex): Promise<void> {
    // compatibility with coreprotect
    if (!(await knex.schema.hasTable("co_user"))) {
        await knex.schema.createTable("co_user", (table) => {
            table.specificType("rowid", `int not null auto_increment, primary key (rowid)`);
            table.integer("time");
            table.string("user", 100);
            table.string("uuid", 64);
            table.index(["uuid", "user"]);
        });

        await knex.schema.createTable("co_username_log", (table) => {
            table.specificType("rowid", `int not null auto_increment, primary key (rowid)`);
            table.integer("time");
            table.string("uuid", 64);
            table.string("user", 100);
            table.index("uuid");
        });
    }

    await knex.schema.createTable("users", (table) => {
        table.increments("id").primary().notNullable();
        table.dateTime("time").defaultTo(knex.fn.now()).notNullable();
        table.integer("coreprotect_uid").references("rowid").inTable("co_user").notNullable();
        table.text("roles").notNullable();
        table.index("coreprotect_uid");
    });

    await knex.schema.createTable("staff_logs", (table) => {
        table.increments("id").primary().notNullable();
        table.dateTime("time").defaultTo(knex.fn.now()).notNullable();
        table.text("reason").notNullable(); // markdown
        table.text("action").notNullable(); // markdown
        table.boolean("ban_occured").notNullable(); // will be generated by detecting keywords in `action`
        table.boolean("warn_occured").notNullable();
        table.boolean("kick_occured").notNullable();
    });

    // join table for relating involved staff members and corresponding staff log entry
    await knex.schema.createTable("staff_logs_involvedstaff_co_user", (table) => {
        table.integer("co_user_id").references("rowid").inTable("co_user").notNullable();
        table.integer("staff_log_id").references("id").inTable("staff_logs").unsigned().notNullable();
        table.index("staff_log_id");
    });
    // join table for relating involved users and corresponding staff log entry
    await knex.schema.createTable("staff_logs_involvedusers_co_user", (table) => {
        table.integer("co_user_id").references("rowid").inTable("co_user").notNullable();
        table.integer("staff_log_id").references("id").inTable("staff_logs").unsigned().notNullable();
        table.index("staff_log_id");
    });
    // join table for relating staff members who finished the action, and corresponding staff log entry
    await knex.schema.createTable("staff_logs_finishedstaff_co_user", (table) => {
        table.integer("co_user_id").references("rowid").inTable("co_user");
        table.integer("staff_log_id").references("id").inTable("staff_logs").unsigned().notNullable();
        table.index("staff_log_id");
    });
}

export async function down(knex: Knex): Promise<void> {
    await knex.schema.dropTableIfExists("staff_logs_involvedusers_co_user");
    await knex.schema.dropTableIfExists("staff_logs_involvedstaff_co_user");
    await knex.schema.dropTableIfExists("staff_logs_finishedstaff_co_user");
    await knex.schema.dropTableIfExists("staff_logs");
    await knex.schema.dropTableIfExists("users");
}
